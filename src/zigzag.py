'''
    ### g was generated by networkx library
    ### Example of input to read file

    import networkx as nx

    if len(sys.argv) > 1:
        dot = sys.argv[1]
    else:
        print("python3 zigzag.py <name.dot>\n")
        exit(0)

    g = nx.DiGraph(nx.drawing.nx_pydot.read_dot(dot))
'''

def zigzag_algorithm(g):
    
    OutputList = []
    # get the node inputs
    for n in g.nodes():
        if g.out_degree(n) == 0:
            OutputList.append([n, 'IN'])

    Stack = OutputList.copy()
    
    EDGES = []

    L_fanin, L_fanout = {}, {}
    for no in g:
        L_fanin[no] = list(g.predecessors(no))
        L_fanout[no] = list(g.successors(no))

    while Stack:
        a, direction = Stack.pop(0) # get the top1

        fanin = len(L_fanin[a])     # get size fanin
        fanout = len(L_fanout[a])   # get size fanout

        if direction == 'IN': # direction == 'IN'
            
            if fanout >= 1: # Case 3

                b = L_fanout[a][-1] # get the element more the right side

                for i in range(fanin):
                    Stack.insert(0, [a, 'IN'])
                Stack.insert(0, [b, 'OUT']) # insert into stack

                L_fanout[a].remove(b)
                L_fanin[b].remove(a)
                 
                EDGES.append([a,b,0])

            elif fanin >= 1: # Case 2

                b = L_fanin[a][-1]      # get the elem more in the right

                Stack.insert(0, [a, 'IN'])
                for i in range(fanin):
                    Stack.insert(0, [b, 'IN'])

                L_fanin[a].remove(b)
                L_fanout[b].remove(a)
                
                EDGES.append([a,b,1]) 

        else: # direction == 'OUT'
            
            if fanin >= 1: # Case 3

                b = L_fanin[a][0] # get the element more left side

                for i in range(fanout):
                    Stack.insert(0, [a, 'OUT'])
                Stack.insert(0, [b, 'IN'])
                
                L_fanin[a].remove(b)
                L_fanout[b].remove(a)
                
                EDGES.append([a,b,1])
            
            elif fanout >= 1: # Case 2
                
                b = L_fanout[a][0]  # get the element more left side

                Stack.insert(0, [a, 'OUT'])
                for i in range(fanout):
                    Stack.insert(0, [b, 'OUT'])

                L_fanout[a].remove(b)
                L_fanin[b].remove(a)

                EDGES.append([a,b,0])

    return EDGES
